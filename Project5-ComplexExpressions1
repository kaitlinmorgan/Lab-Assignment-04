#Kaitlin Morgan
#Assignment 4

#<!----------Project 5: Complex Expressions (I)--------->

#Previously explained functions listed below, new code explained

#Name change to complex
def complexExpressionIsValid(expr):
    add = "+"
    sub = "-"
    mult = "*"
    div = "/"
#Added parathesis variables
    par1 = "("
    par2 = ")"

    addFind = expr.find(add)
    subFind = expr.find(sub)
    multFind = expr.find(mult)
    divFind = expr.find(div)
#Added parenthesis finders
    par1Find = expr.find(par1)
    par2Find = expr.find(par2)
#Now takes parenthsis into account before/after first/last numbers
    add_num1 = expr[par1Find+1:addFind]
    add_num2 = expr[addFind+1:par2Find]
#Now takes parenthsis into account before/after first/last numbers
    sub_num1 = expr[par1Find+1:subFind]
    sub_num2 = expr[subFind+1:par2Find]
#Now takes parenthsis into account before/after first/last numbers
    mult_num1 = expr[par1Find+1:multFind]
    mult_num2 = expr[multFind+1:par2Find]
#Now takes parenthsis into account before/after first/last numbers
    div_num1 = expr[par1Find+1:divFind]
    div_num2 = expr[divFind+1:par2Find]

    if add_num1.isdigit() and add_num2.isdigit():
        return "Valid"

    if sub_num1.isdigit() and sub_num2.isdigit():
        return "Valid"

    if mult_num1.isdigit() and mult_num2.isdigit():
        return "Valid"

    if div_num1.isdigit() and div_num2.isdigit():
        return "Valid"

    else:
        return "Invalid"

def addition(expr):
    addFind = expr.find("+")
#Now takes parenthsis into account before/after first/last numbers
    add_num1 = float(expr[par1Find+1:addFind])
    add_num2 = float(expr[addFind +1:par2Find])
    Sum = float(add_num1+add_num2)
    return Sum

def subtraction(expr):
    subFind = expr.find("-")
#Now takes parenthsis into account before/after first/last numbers
    sub_num1 = float(expr[par1Find+1:subFind])
    sub_num2 = float(expr[subFind +1:par2Find])
    Diff = float(sub_num1-sub_num2)
    return Diff

def multiplication(expr):
    multFind = expr.find("*")
#Now takes parenthsis into account before/after first/last numbers
    mult_num1 = float(expr[par1Find+1:multFind])
    mult_num2 = float(expr [multFind +1:par2Find])
    Prod = float(mult_num1*mult_num2)
    return Prod

def division(expr):
    divFind = expr.find("/")
#Now takes parenthsis into account before/after first/last numbers
    div_num1 = float(expr[par1Find+1:divFind])
    div_num2 = float(expr [divFind +1:par2Find])
    Quo = float(div_num1/div_num2)
    return Quo

def complexExpression(expr):
    opp = input("Enter the opperation you used (+, -, *, or /): ")
    if opp == "+":
        return addition(expr)
    elif opp == "-":
        return subtraction(expr)
    elif opp == "*":
        return multiplication(expr)
    elif opp == "/":
        return division(expr)
    else:
        return "Invalid"

#/*----------------------------------------------------------------
#New empty list created to store entries
memoryList = []
#Small intro
print("Welcome to Calculator!")
#Turns calculator off if user types 'end' otherwise continues
end = input("Type 'end' to turn off or hit enter to continue: ")
#If not turned off, will continue to loop
while end != "end":
#Ask user for expression
    expr = input("Enter a complex expression: ")
#Check to see if it's valid to proceed
    if complexExpressionIsValid(expr) == "Valid":
#Printing format expression = answer
        print(expr, "=", complexExpression(expr))
#Defining last expression as list of last thing printed
        lastExpr = [expr, "=", complexExpression(expr)]
#Adds latest calculation to masterlist
        memoryList.append(lastExpr)
#Prints list of old enteries
        print(memoryList)
#Keeps going if anything but 'end' is entered
        end = input("Type 'end' to turn off or hit enter to continue: ")
#Asks for new expression if previous is invalid, tells user its invalid
    else:
        print("Invalid expression")
